= ministry_of_state

Because State machines are simple, they do not have to be greater than 2000 lines of code (and complexity).

= Features
* Events are wrapped in a transaction and record is locked before going for a state change.
* Ignores dirty attributes (still on the fence with this one)
* Events and states can be inhereted across classes.
* Simple 136 lines of code, covered with close to > 98% test coverage.

= Using it

    class User < ActiveRecord::Base
      include MinistryOfState
      ministry_of_state('status') do
        add_initial_state 'pending'
        add_state :active
        add_state :pending_payment

        add_event(:activate) do
          transitions(:from => :pending, :to => :active)
        end
      end
    end

= Installation

Add this line to your application's Gemfile:

    gem 'ministry_of_state'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem ministry_of_state

== Contributing to ministry_of_state

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Hemant, Neeraj and Vishnu. See LICENSE.txt for
further details.
